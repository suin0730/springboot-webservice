buildscript{
    //build.gradle에서 사용하는 전역변수를 설정하겠다는 의미
    //즉, spring-boot-gradle-plugin의 2.1.7.RELEASE를 의존성으로 받겠다는 의미
    ext{
        springBootVersion = '2.1.7.RELEASE'
    }
    repositories{
        mavenCentral()
        jcenter()
    }
    dependencies{
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}


//플러그인의 의존성을 적용할 것인지 결정하는 코드
//dependency가 안만들어져 plugins{}은 지움
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    //testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    //testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    //버전을 지정하지 않아야 위 버전을 따라감
    //각 라이브러리들의 버전 관리가 한 곳에 집중되고, 버전 충돌 문제도 해결되어 편하게 개발할 수 있음
    //junit 단위테스트를 위한 의존성
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.projectlombok:lombok')
    //스프링부트용 spring data jpa 추상화 라이브러리
    //스프링부트 버전에 맞춰 자동으로 JPA 관련 라이브러리들의 버전 관리
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    //인메모리 관계형 데이터베이스
    //메모리에서 실행되므로 앱을 재시작할때마다 초기화된다는 점을 이용해 테스트 용도로 많이 사용
    compile('com.h2database:h2')
    compile('org.springframework.boot:spring-boot-starter-mustache')
    testCompile('org.springframework.boot:spring-boot-starter-test')
}

//compile, runtime, testCompile, testRuntime의 차이
//junit이 있어야하는가? --> 없어야 한다!

test {
    useJUnitPlatform()
}